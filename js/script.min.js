Array.prototype.inArray=function t(e){for(var s=0;s<this.length;s++){if(this[s]===e){return true}}return false};if(Array.prototype.equals)console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.");Array.prototype.equals=function(t){if(!t)return false;if(this.length!=t.length)return false;for(var e=0,s=this.length;e<s;e++){if(this[e]instanceof Array&&t[e]instanceof Array){if(!this[e].equals(t[e]))return false}else if(this[e]!=t[e]){return false}}return true};if(Array.prototype.contains)console.warn("Overriding existing Array.prototype.contains. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.");Array.prototype.contains=function(t){if(!this)return false;var e=false;for(var s=0,i=this.length;s<i;s++){if(this[s]instanceof Array){if(this[s].equals(t))e=true}else if(this[s]===t)e=true}return e};Array.prototype.indexOf=function(t){if(!this)return-1;var e=-1;for(var s=0,i=this.length;s<i;s++){if(this[s]instanceof Array)if(this[s].equals(t))e=s;else if(this[s]===t)e=s}return e};"use strict";var game={boardMap:[],bombsMap:[],boardSpan:8,board:null,bombs:8,flagMode:false,get score(){return Math.pow(this.boardSpan,2)-this.bombs},start:function(){this.setHandlers();this.board=document.getElementById("board");this.buildBoard();this.spreadBombs();this.spreadNums()},restart:function(){for(var t=0;t<objects.length;t++){objects[t].clean()}game.spreadBombs();game.spreadNums()},setHandlers:function(){$(".reload").click(this.restart);$("#toggleFlagModeBtn").click(this.toggleFlagMode);$("#menuBtn").click(function(){$("#gameMenu").modal()})},buildBoard:function(){for(var t=0;t<this.boardSpan;t++){var e=[],s=document.createElement("div");s.className="btn-group btn-block";for(var i=0;i<this.boardSpan;i++){var a=new Tile(i,t);e.push(a);s.appendChild(a.btn)}this.boardMap[t]=e;this.board.appendChild(s)}},spreadBombs:function(){this.bombsMap=[];var t,e;for(var s=0;s<this.bombs;s++){t=Math.round(Math.random()*(this.boardSpan-1));e=Math.round(Math.random()*(this.boardSpan-1));if(!this.boardMap[e][t].bomb){this.bombsMap.push([t,e]);this.boardMap[e][t].setBomb()}else s--}},spreadNums:function(){for(var t=0;t<this.bombsMap.length;t++){var e=this.bombsMap[t][0];var s=this.bombsMap[t][1];var i=this.getNeighbors(e,s);for(var a=0;a<i.length;a++){var r=i[a][0];var n=i[a][1];if(!this.boardMap[n][r].bomb){this.boardMap[n][r].addDanger()}}}},getNeighbors:function(t,e){var s=[[-1,-1],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0]];var i=[];for(var a=0;a<s.length;a++){var r=t+s[a][0];var n=e+s[a][1];if(n<this.boardSpan&&n>-1&&r<this.boardSpan&&r>-1){i.push([r,n])}}return i},revealNeighbors:function(t,e){var s=[[t,e]];var i=s.slice();while(s.length>0){var a=this.getNeighbors(s[0][0],s[0][1]);for(var r=0;r<a.length;r++){var n=game.boardMap[a[r][1]][a[r][0]];if(!i.contains(a[r])){if(!n.flag&&!n.revealed){if(n.danger===0){i.push(a[r]);s.push(a[r])}else{i.push(a[r])}}}}s.shift()}for(var r=0;r<i.length;r++){var o=i[r][0];var l=i[r][1];this.boardMap[l][o].render()}},toggleFlagMode:function(){this.classList.toggle("btn-flag-active");game.flagMode=!game.flagMode}};var objects=[];function Tile(t,e){this.x=t;this.y=e;this.danger=0;this.bomb=false;this.flag=false;this.revealed=false;var s=document.createElement("div");s.className="btn btn-tile";s.addEventListener("click",this,false);var i=document.createElement("span");i.innerHTML="";this.icon=i;this.btn=s;this.btn.appendChild(this.icon);this.addEvents();objects.push(this)}Tile.prototype.addEvents=function(){this.btn.addEventListener("click",this)};Tile.prototype.removeEvents=function(){this.btn.removeEventListener("click",this)};Tile.prototype.handleEvent=function(t){switch(t.type){case"click":this.click(t)}};Tile.prototype.click=function(t){console.log("click "+this.x+":"+this.y);if(game.flagMode){this.toggleFlag()}else if(!this.revealed&&!this.flag){if(!this.bomb){if(!this.danger>0){game.revealNeighbors(this.x,this.y)}else{this.render()}}else{this.render();$("#gameOver").modal()}}};Tile.prototype.setBomb=function(){this.bomb=true};Tile.prototype.addDanger=function(){this.danger++};Tile.prototype.toggleFlag=function(){this.flag=!this.flag;this.btn.classList.toggle("btn-tile");this.btn.classList.toggle("btn-flag-active");console.log("Flag: "+this.flag)};Tile.prototype.render=function(){console.log("render "+this.x+":"+this.y);this.revealed=true;this.removeEvents();if(this.bomb){this.btn.className="btn btn-bomb"}else{this.btn.className="btn btn-revealed";this.icon.className="";this.icon.innerHTML=this.danger}};Tile.prototype.clean=function(){this.danger=0;this.bomb=false;this.flag=false;this.revealed=false;this.btn.className="btn btn-tile";this.icon.className="glyphicon glyphicon-plus";this.icon.innerHTML="";this.addEvents()};$(document).ready(function(){game.start()});